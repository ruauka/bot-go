package queue

import (
	"fmt"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"bot/internal/domain/entities"
)

var (
	ManicSmall   = "–º–∞–Ω–∏–∫—é—Ä"
	MassageSmall = "–º–∞—Å—Å–∞–∂"
	SportSmall   = "—Å–ø–æ—Ä—Ç"
	Massage      = "–ú–∞—Å—Å–∞–∂"
	Manic        = "–ú–∞–Ω–∏–∫—é—Ä"
	Sport        = "–°–ø–æ—Ä—Ç"
	Meeting      = "–í—Å—Ç—Ä–µ—á–∞"
)

func eventCheck(event entities.Event) tg.MessageConfig {
	if event.Type == Manic {
		return reminderRespCreate(event, ManicSmall, "üíÖ")
	}

	if event.Type == Massage {
		return reminderRespCreate(event, MassageSmall, "üíÜ‚Äç‚ôÄ")
	}

	if event.Type == Sport {
		return reminderRespCreate(event, SportSmall, "üèÉ‚Äç‚ôÄ")
	}

	if event.Type == Meeting {
		return reminderRespCreate(event, "", "üóì")
	}

	return tg.MessageConfig{}
}

func reminderRespCreate(event entities.Event, eventName, badge string) tg.MessageConfig {
	if event.Type == Meeting {
		switch event.ReminderStatus {
		case 0:
			return tg.NewMessage(event.TelegaID,
				fmt.Sprintf("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á–∞ %s –≤ %s %s", event.Whom, event.Date[11:], badge),
			)
		case 1:
			return tg.NewMessage(event.TelegaID,
				fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞—é. –£ —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞ %s –≤ %s %s", event.Whom, event.Date[11:], badge),
			)
		case 2:
			return tg.NewMessage(event.TelegaID,
				fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞—é. –£ —Ç–µ–±—è —á–µ—Ä–µ–∑ —á–∞—Å –≤—Å—Ç—Ä–µ—á–∞ %s –≤ %s %s", event.Whom, event.Date[11:], badge),
			)
		}
	}

	switch event.ReminderStatus {
	case 0:
		return tg.NewMessage(event.TelegaID,
			fmt.Sprintf("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è %s –≤ %s %s", eventName, event.Date[11:], badge),
		)
	case 1:
		return tg.NewMessage(event.TelegaID,
			fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞—é. –£ —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ %s –≤ %s %s", eventName, event.Date[11:], badge),
		)
	case 2:
		return tg.NewMessage(event.TelegaID,
			fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞—é. –£ —Ç–µ–±—è —á–µ—Ä–µ–∑ —á–∞—Å %s –≤ %s %s", eventName, event.Date[11:], badge),
		)
	}

	return tg.MessageConfig{}
}
