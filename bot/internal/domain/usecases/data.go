package usecases

import (
	"regexp"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/matperez/go-cbr-client"
)

const DatePointLayout = "02.01.2006"
const DatePointTimeLayout = "02.01.2006 15:04"
const TimeDashTimeLayout = "2006-01-02 15:04"

const (
	StateQuestion = iota
	StateDate
	StateTime
)

const (
	StartCmd                 = "start"
	MenuCmd                  = "menu"
	Massage                  = "–ú–∞—Å—Å–∞–∂"
	Manic                    = "–ú–∞–Ω–∏–∫—é—Ä"
	Sport                    = "–°–ø–æ—Ä—Ç"
	Meeting                  = "–í—Å—Ç—Ä–µ—á–∞"
	HelloMsg                 = "‚¨á –ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
	MainMenu                 = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	SignDate                 = "–®–∞–≥ [1/2]\n\n–£–∫–∞–∂–∏ –¥–∞—Ç—É. –§–æ—Ä–º–∞—Ç: dd.mm.yyyy üóì"
	SignTime                 = "–®–∞–≥ [2/2]\n\n–£–∫–∞–∂–∏ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: hh:mm üïî"
	DeleteEvent              = "–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.\n–§–æ—Ä–º–∞—Ç: dd.mm.yyyy hh:mm üóì"
	SaveUpdate               = "C–æ—Ö—Ä–∞–Ω–∏–ª. –ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ üëå"
	DeleteUpdate             = "–û—Ç–º–µ–Ω–∏–ª üëå"
	DBProblem                = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î ‚ùå"
	WrongDateFormat          = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ‚ùåüóì"
	WrongTimeFormat          = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ‚ùåüïî"
	DateBeforeNow            = "–≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª ‚ùå"
	TimeBeforeNow            = "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚ùå"
	EmptyManic               = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞–Ω–∏–∫—é—Ä ü§∑‚Äç‚ôÄ"
	EmptyMassage             = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞—Å—Å–∞–∂ ü§∑‚Äç‚ôÄ"
	EmptySport               = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–ø–æ—Ä—Ç ü§∑‚Äç‚ôÄ"
	EmptyMeeting             = "–ü–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á ü§∑‚Äç‚ôÄ"
	OtherMessagesPlug        = "–û–π, –¥–∞–≤–∞–π –Ω–µ —Å–µ–π—á–∞—Å..."
	MashaMenu                = "–ß–µ–º –∑–∞–π–º–µ–º—Å—è?"
	SashaMenu                = "–ß–µ–≥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"
	MassageQuestion          = "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –º–∞—Å—Å–∞–∂–µ–º?"
	ManicQuestion            = "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –º–∞–Ω–∏–∫—é—Ä–æ–º?"
	SportQuestion            = "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å–æ —Å–ø–æ—Ä—Ç–æ–º?"
	MeetingQuestion          = "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å–æ –≤—Å—Ç—Ä–µ—á–µ–π?"
	EventNotFound            = "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ ü§∑‚Äç‚ôÄ"
	BackButtonMashaOrderMenu = "masha order menu"
	BackButtonMashaMenu      = "masha menu"
	BackButtonSashaMenu      = "sasha menu"
	USD                      = "USD"
	EURO                     = "EUR"
	CBProblem                = "–ù–µ –¥–æ—Å—Ç—É—á–∞–ª—Å—è –¥–æ —Å–∞–π—Ç–∞ –¶–ë ‚ùå"
)

type State struct {
	State      int // 0 - question, 1 - date, 2 - time
	ChatName   string
	DeleteMode bool
	Date       string
	Time       string
}

var client = cbr.NewClient()

var BackButtonStatus = make(map[int64]string)

var (
	dateRe = regexp.MustCompile(`^\s*(3[01]|[12][0-9]|0?[1-9])\.(1[012]|0?[1-9])\.((?:19|20)\d{2})\s*$`)
	timeRe = regexp.MustCompile(`^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$`)
)

var (
	MassageState = NewState()
	ManicState   = NewState()
	SportState   = NewState()
	MeetingState = NewState()

	Chats    = []map[int64]*State{MassageState, ManicState, SportState, MeetingState}
	EventArr = [4]string{Massage, Manic, Sport, Meeting}

	MainMenuButtons = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üë¶ –°–∞—à–∞"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üë© –ú–∞—à–∞"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞"),
			tg.NewKeyboardButton("üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç—ã"),
		),
	)

	MashaMenuButtons = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üíÜ‚Äç‚ôÄ –ú–∞—Å—Å–∞–∂"),
			tg.NewKeyboardButton("üíÖ –ú–∞–Ω–∏–∫—é—Ä"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üèÉ‚Äç‚ôÄ –°–ø–æ—Ä—Ç"),
			tg.NewKeyboardButton("üóì –í—Å—Ç—Ä–µ—á–∞"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–í—Å–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)

	SashaMenuButtons = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üóú Git"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üê≥ Docker"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üï∏ Kuber"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)

	OrderButtons = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üôã‚Äç‚ôÄ –°–æ–∑–¥–∞—Ç—å"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üôÖ‚Äç‚ôÄ –û—Ç–º–µ–Ω–∏—Ç—å"),
		),
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)

	CancelButton = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
		),
	)
)

func NewState() map[int64]*State {
	return make(map[int64]*State)
}

var (
	Git = []string{
		"rm -rf .git",
		"git checkout -b new_branch",
	}

	Docker = []string{
		"docker build --tag=go-server .",
		"docker run -d --name my-go-server -p 8080:8000 go-server",
		"docker container stop my-go-server",
		"docker container rm my-go-server",
		"docker container logs my-go-server",
		"docker images",
		"docker ps",
		"docker volume ls",
		"docker rmi -f $(docker images -a -q)",
	}

	Kuber = []string{
		"minikube start",
		"minikube status",
		"minikube stop",
		"minikube delete",
	}
)
